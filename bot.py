import logging
import os
import re
import requests
import asyncio
import threading
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === ‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ RapidAPI ===
def get_birth_date(player_name):
    url = "https://wikipedia-api3.p.rapidapi.com/wiki"
    headers = {
        "x-rapidapi-key": "3ed5fdda73mshfec256005e6f066p1a0e68jsn8a3add5d7863",  # —Ç–≤–æ–π –∫–ª—é—á
        "x-rapidapi-host": "wikipedia-api3.p.rapidapi.com"
    }
    params = {"action": "get_summary", "title": player_name}

    try:
        r = requests.get(url, headers=headers, params=params, timeout=10)
        r.raise_for_status()
        data = r.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        extract = data.get("extract", "")
        if not extract:
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –í–∏–∫–∏–ø–µ–¥–∏–∏."

        match = re.search(r"—Ä–æ–¥–∏–ª[–∞c][–∞—Å—å]?\s*(\d{1,2}\s+[–∞-—è]+\s+\d{4})", extract)
        if match:
            return f"üéâ –†–æ–¥–∏–ª—Å—è {match.group(1)}"
        else:
            return "‚ö†Ô∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    except requests.exceptions.RequestException as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API: {e}"

# === –¢–µ–ª–µ–≥—Ä–∞–º –∫–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("‚öΩ –ù–∞–ø–∏—à–∏ –∏–º—è —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–∞–ª–∞—Ö, –ú–µ—Å—Å–∏, –†–æ–Ω–∞–ª–¥—É) ‚Äî —è —Å–∫–∞–∂—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")

@dp.message()
async def handle_name(message: types.Message):
    player_name = message.text.strip().capitalize()
    reply = get_birth_date(player_name)
    await message.answer(reply)

# === Flask –¥–ª—è Render ===
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

async def main():
    threading.Thread(target=run_flask).start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


if __name__ == "__main__":
    asyncio.run(main())
