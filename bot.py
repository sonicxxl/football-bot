import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.utils.exceptions import ConflictError

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8213820981:AAHkls9iAujHNu126nX2d9ppdMJpvzMZoiA"  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram —Ç–æ–∫–µ–Ω
RAPIDAPI_KEY = "3ed5fdda73mshfec256005e6f066p1a0e68jsn8a3add5d7863"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üîç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏.")


# === –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Wikipedia API –Ω–∞ RapidAPI ===
@dp.message_handler()
async def wiki_search(message: types.Message):
    query = message.text.strip()
    url = "https://wikipedia-api3.p.rapidapi.com/wiki"
    params = {"action": "get_summary", "title": query}
    headers = {
        "x-rapidapi-key": RAPIDAPI_KEY,
        "x-rapidapi-host": "wikipedia-api3.p.rapidapi.com"
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            summary = data.get("summary", "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await message.answer(summary[:4000])  # Telegram –ª–∏–º–∏—Ç
        elif response.status_code == 404:
            await message.answer("‚ö†Ô∏è –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        elif response.status_code == 403:
            await message.answer("üö´ –û—à–∏–±–∫–∞ 403: –ü—Ä–æ–≤–µ—Ä—å RapidAPI –∫–ª—é—á –∏ —Ö–æ—Å—Ç.")
        else:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API: {e}")


# === –ó–∞–ø—É—Å–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ polling ===
async def run_bot():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –∂–¥—ë–º 10 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
    await asyncio.sleep(10)

    while True:
        try:
            print("‚úÖ Polling Telegram...")
            await dp.start_polling()
        except ConflictError:
            print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç polling ‚Äî –∂–¥—ë–º 15 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...")
            await asyncio.sleep(15)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e} ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(20)


if __name__ == "__main__":
    asyncio.run(run_bot())
