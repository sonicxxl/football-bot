import logging
import os
import requests
import asyncio
import threading
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

RAPID_API_KEY = os.getenv("RAPID_API_KEY")

def get_birth_date(player_name):
    url = "https://wikipedia-api3.p.rapidapi.com/wiki"
    querystring = {"action": "get_summary", "title": player_name}
    headers = {
        "x-rapidapi-key": RAPID_API_KEY,
        "x-rapidapi-host": "wikipedia-api3.p.rapidapi.com"
    }

    try:
        response = requests.get(url, headers=headers, params=querystring, timeout=10)
        response.raise_for_status()
        data = response.json()
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API: {e}"

    extract = data.get("summary", "")
    if not extract:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –í–∏–∫–∏–ø–µ–¥–∏–∏."

    import re
    match = re.search(r"(\d{1,2}\s+[–∞-—è]+\s+\d{4})", extract)
    if match:
        return f"üéâ –†–æ–¥–∏–ª—Å—è {match.group(1)}"
    else:
        return f"‚öΩ {player_name}: –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("‚öΩ –ù–∞–ø–∏—à–∏ –∏–º—è —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–∞–ª–∞—Ö, –ú–µ—Å—Å–∏, –†–æ–Ω–∞–ª–¥—É) ‚Äî —è —Å–∫–∞–∂—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")

@dp.message()
async def handle_name(message: types.Message):
    player_name = message.text.strip()
    reply = get_birth_date(player_name)
    await message.answer(reply)

# Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Bot is running with RapidAPI (Wikipedia API3)"

def run_flask():
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

async def main():
    threading.Thread(target=run_flask).start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
