import logging
import os
import re
import requests
import asyncio
import threading
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

def get_birth_date(player_name):
    url = f"https://ru.wikipedia.org/api/rest_v1/page/summary/{player_name}"
    r = requests.get(url)
    if r.status_code != 200:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    data = r.json()
    text = data.get("extract", "")
    match = re.search(r"—Ä–æ–¥–∏–ª[–∞c][–∞—Å—å]?\s*(\d{1,2}\s+[–∞-—è]+\s+\d{4})", text)
    if match:
        return f"üéâ –†–æ–¥–∏–ª—Å—è {match.group(1)}"
    else:
        return "‚ö†Ô∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("‚öΩ –ù–∞–ø–∏—à–∏ –∏–º—è —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–∞–ª–∞—Ö, –ú–µ—Å—Å–∏, –†–æ–Ω–∞–ª–¥—É) ‚Äî —è —Å–∫–∞–∂—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")

@dp.message()
async def handle_name(message: types.Message):
    player_name = message.text.strip().capitalize()
    reply = get_birth_date(player_name)
    await message.answer(reply)

# Flask web server for Render
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

async def main():
    threading.Thread(target=run_flask).start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

