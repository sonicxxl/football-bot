import logging
import os
import re
import requests
import asyncio
import threading
from flask import Flask
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# ---- —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ----
def get_birth_date(player_name):
    # –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Render
    proxies = {
        "http": "http://proxy.scrapeops.io:8080",
        "https": "http://proxy.scrapeops.io:8080"
    }

    # —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∏–º—è –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏
    search_url = "https://ru.wikipedia.org/w/api.php"
    params = {
        "action": "query",
        "list": "search",
        "srsearch": player_name,
        "utf8": "",
        "format": "json"
    }

    try:
        r = requests.get(search_url, params=params, proxies=proxies, timeout=10)
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –í–∏–∫–∏–ø–µ–¥–∏–∏: {e}"

    if r.status_code != 200:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –í–∏–∫–∏–ø–µ–¥–∏–∏."

    data = r.json()
    results = data.get("query", {}).get("search", [])
    if not results:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."

    # –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    title = results[0]["title"]
    url = f"https://ru.wikipedia.org/api/rest_v1/page/summary/{title}"

    try:
        r = requests.get(url, proxies=proxies, timeout=10)
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}"

    if r.status_code != 200:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –í–∏–∫–∏–ø–µ–¥–∏–∏."

    data = r.json()
    text = data.get("extract", "")

    # –∏—â–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
    match = re.search(r"—Ä–æ–¥–∏–ª[–∞c][–∞—Å—å]?\s*(\d{1,2}\s+[–∞-—è]+\s+\d{4})", text)
    if match:
        return f"üéâ {title} —Ä–æ–¥–∏–ª—Å—è {match.group(1)}"
    else:
        return f"‚ö†Ô∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è {title} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."


# ---- –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ----
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("‚öΩ –ù–∞–ø–∏—à–∏ –∏–º—è —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–∞–ª–∞—Ö, –ú–µ—Å—Å–∏, –†–æ–Ω–∞–ª–¥—É) ‚Äî —è —Å–∫–∞–∂—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")


@dp.message()
async def handle_name(message: types.Message):
    player_name = message.text.strip().capitalize()
    reply = get_birth_date(player_name)
    await message.answer(reply)


# ---- Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ----
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Bot is running and connected to Render!"

def run_flask():
    # Render —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port)


# ---- –∑–∞–ø—É—Å–∫ ----
async def main():
    threading.Thread(target=run_flask).start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
